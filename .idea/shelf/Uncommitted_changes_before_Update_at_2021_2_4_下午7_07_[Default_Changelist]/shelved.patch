Index: src/main/java/io/theflysong/github/util/math/MatrixStack.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package io.theflysong.github.util.math;\n\nimport org.joml.Matrix3f;\n\nimport java.util.Stack;\n\npublic class MatrixStack {\n    protected Stack<Matrix3f> matrixStack = new Stack();\n    Matrix3f matrix = new Matrix3f();\n\n    public void push() {\n        matrixStack.push(matrix);\n    }\n\n    public void pop() {\n        matrix = matrixStack.pop();\n    }\n\n    public Matrix3f getMatrix() {\n        return matrix;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/io/theflysong/github/util/math/MatrixStack.java b/src/main/java/io/theflysong/github/util/math/MatrixStack.java
--- a/src/main/java/io/theflysong/github/util/math/MatrixStack.java	(revision 271aa5305ecf479450e09a56b2b1b1df88597713)
+++ b/src/main/java/io/theflysong/github/util/math/MatrixStack.java	(date 1612434656797)
@@ -1,12 +1,13 @@
 package io.theflysong.github.util.math;
 
-import org.joml.Matrix3f;
+import org.joml.Matrix4f;
+import org.joml.Quaternionfc;
 
 import java.util.Stack;
 
 public class MatrixStack {
-    protected Stack<Matrix3f> matrixStack = new Stack();
-    Matrix3f matrix = new Matrix3f();
+    protected Stack<Matrix4f> matrixStack = new Stack();
+    Matrix4f matrix = new Matrix4f();
 
     public void push() {
         matrixStack.push(matrix);
@@ -16,7 +17,23 @@
         matrix = matrixStack.pop();
     }
 
-    public Matrix3f getMatrix() {
+    public Matrix4f getMatrix() {
         return matrix;
     }
+
+    public void translate(float x, float y, float z) {
+        matrix.translate(x, y, z);
+    }
+
+    public void scale(float x, float y, float z) {
+        matrix.scale(x, y, z);
+    }
+
+    public void rotate(float angle, float x, float y, float z) {
+        matrix.rotate(angle, x, y, z);
+    }
+
+    public void rotate(Quaternionfc quaternion) {
+        matrix.rotate(quaternion);
+    }
 }
Index: .idea/runConfigurations/Run_test2_Client.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/runConfigurations/Run_test2_Client.xml b/.idea/runConfigurations/Run_example2_Client.xml
rename from .idea/runConfigurations/Run_test2_Client.xml
rename to .idea/runConfigurations/Run_example2_Client.xml
--- a/.idea/runConfigurations/Run_test2_Client.xml	(revision 271aa5305ecf479450e09a56b2b1b1df88597713)
+++ b/.idea/runConfigurations/Run_example2_Client.xml	(date 1612433223901)
@@ -1,5 +1,5 @@
 <component name="ProjectRunConfigurationManager">
-  <configuration default="false" name="Run test2 Client" type="Application" factoryName="Application">
+  <configuration default="false" name="Run example2 Client" type="Application" factoryName="Application">
     <option name="MAIN_CLASS_NAME" value="io.theflysong.github.example.example2.Main" />
     <module name="EG-Engine.test" />
     <option name="PROGRAM_PARAMETERS" value="-Client localhost 17000" />
Index: .idea/runConfigurations/Run_test1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/runConfigurations/Run_test1.xml b/.idea/runConfigurations/Run_example1.xml
rename from .idea/runConfigurations/Run_test1.xml
rename to .idea/runConfigurations/Run_example1.xml
--- a/.idea/runConfigurations/Run_test1.xml	(revision 271aa5305ecf479450e09a56b2b1b1df88597713)
+++ b/.idea/runConfigurations/Run_example1.xml	(date 1612433223957)
@@ -1,5 +1,5 @@
 <component name="ProjectRunConfigurationManager">
-  <configuration default="false" name="Run test1" type="Application" factoryName="Application">
+  <configuration default="false" name="Run example1" type="Application" factoryName="Application">
     <option name="ALTERNATIVE_JRE_PATH" value="1.8" />
     <option name="MAIN_CLASS_NAME" value="io.theflysong.github.example.example1.Main" />
     <module name="EG-Engine.test" />
Index: .idea/runConfigurations/Run_test2_Server.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/runConfigurations/Run_test2_Server.xml b/.idea/runConfigurations/Run_example2_Server.xml
rename from .idea/runConfigurations/Run_test2_Server.xml
rename to .idea/runConfigurations/Run_example2_Server.xml
--- a/.idea/runConfigurations/Run_test2_Server.xml	(revision 271aa5305ecf479450e09a56b2b1b1df88597713)
+++ b/.idea/runConfigurations/Run_example2_Server.xml	(date 1612433223845)
@@ -1,5 +1,5 @@
 <component name="ProjectRunConfigurationManager">
-  <configuration default="false" name="Run test2 Server" type="Application" factoryName="Application">
+  <configuration default="false" name="Run example2 Server" type="Application" factoryName="Application">
     <option name="MAIN_CLASS_NAME" value="io.theflysong.github.example.example2.Main" />
     <module name="EG-Engine.test" />
     <option name="PROGRAM_PARAMETERS" value="-Server 17000" />
Index: src/test/resource/assets/example4/shader/test.glvs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resource/assets/example4/shader/test.glvs b/src/test/resource/assets/flysong/shader/test.glvs
rename from src/test/resource/assets/example4/shader/test.glvs
rename to src/test/resource/assets/flysong/shader/test.glvs
--- a/src/test/resource/assets/example4/shader/test.glvs	(revision 271aa5305ecf479450e09a56b2b1b1df88597713)
+++ b/src/test/resource/assets/flysong/shader/test.glvs	(date 1612433666127)
@@ -3,8 +3,10 @@
 layout (location = 1) in vec3 aColor;
 out vec3 Color;
 
+uniform mat4 matrix;
+
 void main()
 {
-    gl_Position = vec4(aPos, 1.0);
+    gl_Position = matrix * vec4(aPos, 1.0);
     Color = aColor;
 }
\ No newline at end of file
Index: src/test/java/test/flysong/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/test/flysong/Main.java b/src/test/java/test/flysong/Main.java
new file mode 100644
--- /dev/null	(date 1612436690347)
+++ b/src/test/java/test/flysong/Main.java	(date 1612436690347)
@@ -0,0 +1,66 @@
+package test.flysong;
+
+import io.theflysong.github.render.buffer.VertexBuffer;
+import io.theflysong.github.render.buffer.VertexBufferFormat;
+import io.theflysong.github.render.shader.Shader;
+import io.theflysong.github.resource.ResourceLocation;
+import io.theflysong.github.util.math.MatrixStack;
+import io.theflysong.github.util.math.Vec4f;
+import io.theflysong.github.window.Window;
+import org.lwjgl.system.MemoryStack;
+
+import java.nio.FloatBuffer;
+
+import static org.lwjgl.opengl.GL11.*;
+import static org.lwjgl.opengl.GL20.*;
+
+public class Main {
+    public static void main(String[] args) throws InterruptedException {
+        System.setProperty("project.debug_mode", "true");
+        Window window = new Window(500, 400, "Example3", new Vec4f(0.2f, 0.3f, 0.3f, 1.0f));
+        Shader shader = new Shader(
+                new ResourceLocation("flysong$test"),
+                new ResourceLocation("flysong$test")
+        );
+
+        VertexBuffer buffer = new VertexBuffer();
+
+        buffer.add(VertexBuffer.getBuilder(
+                shader, new VertexBufferFormat().
+                        addVertex3F().
+                        addColor3F()).
+                pos(0.3f, 0.3f, 0.0f).color(1.0f, 1.0f, 0.0f).
+                pos(0.3f, -0.3f, 0.0f).color(1.0f, 1.0f, 0.0f).
+                pos(-0.3f, -0.3f, 0.0f).color(1.0f, 1.0f, 0.0f).
+                pos(-0.3f, 0.3f, 0.0f).color(1.0f, 1.0f, 0.0f).
+                index(0, 1, 3).
+                index(1, 2, 3)
+        );
+
+        buffer.add(VertexBuffer.getBuilder(
+                shader, new VertexBufferFormat().
+                        addVertex3F().
+                        addColor3F()).
+                pos(1.0f, 1.0f, 0.0f).color(1.0f, 0.0f, 0.0f).
+                pos(1.0f, 0.5f, 0.0f).color(0.0f, 1.0f, 0.0f).
+                pos(0.5f, 0.5f, 0.0f).color(0.0f, 0.0f, 1.0f).
+                pos(0.5f, 1.0f, 0.0f).color(1.0f, 0.0f, 1.0f).
+                index(0, 1, 3).
+                index(1, 2, 3)
+        );
+
+        MemoryStack stack = MemoryStack.stackPush();
+        buffer.init();
+        MatrixStack matrixStack = new MatrixStack();
+        matrixStack.translate(-0.4f, -0.4f, 1.0f);
+        matrixStack.scale(1.2f, 1.2f, 1.0f);
+        FloatBuffer fb = matrixStack.getMatrix().get(stack.mallocFloat(16));
+
+        do {
+            glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
+            glUniformMatrix4fv(shader.getUniformLocation("matrix"), false, fb);
+            buffer.draw();
+        }
+        while (! window.update());
+    }
+}
diff --git a/src/test/resource/assets/example4/shader/test.glfs b/src/test/resource/assets/flysong/shader/test.glfs
rename from src/test/resource/assets/example4/shader/test.glfs
rename to src/test/resource/assets/flysong/shader/test.glfs
